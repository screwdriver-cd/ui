load_module /usr/lib/nginx/modules/ndk_http_module.so;
load_module /usr/lib/nginx/modules/ngx_http_lua_module.so;
user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

# Used by lua below
env ECOSYSTEM_API;
env ECOSYSTEM_STORE;
env AVATAR_HOSTNAME;
env SDDOC_URL;
env SLACK_URL;
env ROOT_URL;
env CANARY_RELEASE;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;

        set_by_lua_block $canary_release {
          return os.getenv("CANARY_RELEASE") or "";
        }

        # Generated by running `ember csp-headers --environment production`
        set_by_lua_block $csp_header {
          return "style-src 'self' 'unsafe-inline'; " ..
            "connect-src 'self' " .. os.getenv("ECOSYSTEM_API") .. " " .. os.getenv("ECOSYSTEM_STORE") .. "; " ..
            "frame-src 'self' " .. os.getenv("ECOSYSTEM_API") .. " " .. os.getenv("ECOSYSTEM_STORE") .. "; " ..
            "default-src 'none'; " ..
            "script-src 'self'; " ..
            "font-src 'self'; " ..
            "img-src 'self' https: data: " .. os.getenv("AVATAR_HOSTNAME") .. "; " ..
            "media-src 'self';" ..
            "worker-src blob:;"
        }


        add_header x-content-type-options 'nosniff';
        add_header x-frame-options 'SAMEORIGIN';
        add_header x-xss-protection '1; mode=block';
        add_header Content-Security-Policy $csp_header;

        set_by_lua_block $rootURL {
          return os.getenv("ROOT_URL") or "";
        }

        location / {
            header_filter_by_lua_block {
                local data = ngx.req.get_headers()['Cookie']
                if canary_release and data == nil  then
                    local expires_time = ngx.cookie_time(ngx.time()+120)
                    local cookieStr = "use_canary=always;Path=/;secure=true;httponly=true;samesite=Strict;Max-Age=120;expires=" .. expires_time
                    ngx.header["Set-Cookie"] = cookieStr
                end
            }
            sub_filter_types text/html text/css;
            sub_filter "/assets" "$rootURL/assets";
            sub_filter_once off;
            index index.html;
            try_files $uri $uri/ /index.html?/$request_uri;
        }

        # Dynamic configuration for the ember app
        location /assets/supplementary_config.js {
           content_by_lua_block {
               ngx.say("window.SUPPLEMENTARY_CONFIG = { ROOT_URL: '", os.getenv("ROOT_URL") or "", "', SDAPI_HOSTNAME: '", os.getenv("ECOSYSTEM_API"), "', SDSTORE_HOSTNAME: '", os.getenv("ECOSYSTEM_STORE"), "', SDDOC_URL: '", os.getenv("SDDOC_URL") or "", "', SLACK_URL: '", os.getenv("SLACK_URL") or "", "', CANARY_RELEASE: '", os.getenv("CANARY_RELEASE") or "", "' };")
           }
        }

        set_by_lua $ecosystem_api 'return os.getenv("ECOSYSTEM_API")';
        rewrite ^/pipelines/([^/]*)/badge$ $ecosystem_api/v4/pipelines/$1/badge redirect;
        rewrite ^/pipelines/([^/]*)/([^/]*)/badge$ $ecosystem_api/v4/pipelines/$1/$2/badge redirect;
    }
}
